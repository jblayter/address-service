name: Deploy to Production (AWS EKS)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

  bump-version:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"
          fi
          
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "Bumped version to: ${NEW_VERSION#v}"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
          git tag v${{ steps.bump.outputs.new_version }}

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin v${{ steps.bump.outputs.new_version }}

  build-and-push:
    needs: bump-version
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ needs.bump-version.outputs.new_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [bump-version, build-and-push]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          release_name: Release v${{ needs.bump-version.outputs.new_version }}
          body: |
            ## What's Changed
            
            Automated release for version ${{ needs.bump-version.outputs.new_version }}
            
            ### Docker Image
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}`
            - Latest: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ### Deployment
            This release is being deployed to AWS EKS.
          draft: false
          prerelease: false

  terraform-deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-west-2

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            ENVIRONMENT="prod"
          fi
          
          terraform plan -var-file="environments/${ENVIRONMENT}.tfvars" -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            ENVIRONMENT="prod"
          fi
          
          terraform apply -auto-approve tfplan

      - name: Get EKS Cluster Info
        working-directory: terraform
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          else
            ENVIRONMENT="prod"
          fi
          
          CLUSTER_NAME=$(terraform output -raw cluster_name)
          CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
          
          echo "EKS Cluster Name: $CLUSTER_NAME" >> $GITHUB_ENV
          echo "EKS Cluster Endpoint: $CLUSTER_ENDPOINT" >> $GITHUB_ENV
          echo "ECR Repository URL: $ECR_REPO_URL" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region us-west-2 --name ${{ env.CLUSTER_NAME }}

      - name: Deploy Application to EKS
        run: |
          # Create namespace if it doesn't exist
          kubectl create namespace address-service --dry-run=client -o yaml | kubectl apply -f -
          
          # Create ConfigMap for application configuration
          kubectl create configmap address-service-config \
            --from-literal=LOG_LEVEL=info \
            --from-literal=NODE_ENV=production \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Create deployment
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: address-service
            namespace: address-service
            labels:
              app: address-service
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: address-service
            template:
              metadata:
                labels:
                  app: address-service
              spec:
                containers:
                - name: address-service
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}
                  ports:
                  - containerPort: 3000
                  env:
                  - name: LOG_LEVEL
                    valueFrom:
                      configMapKeyRef:
                        name: address-service-config
                        key: LOG_LEVEL
                  - name: NODE_ENV
                    valueFrom:
                      configMapKeyRef:
                        name: address-service-config
                        key: NODE_ENV
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /health
                      port: 3000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF
          
          # Create service
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Service
          metadata:
            name: address-service
            namespace: address-service
            labels:
              app: address-service
          spec:
            type: LoadBalancer
            ports:
            - port: 80
              targetPort: 3000
              protocol: TCP
            selector:
              app: address-service
          EOF

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/address-service -n address-service --timeout=300s

      - name: Get service URL
        run: |
          kubectl get service address-service -n address-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' > service_url.txt
          echo "Service URL: $(cat service_url.txt)"

      - name: Deployment Summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'prod' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **EKS Cluster**: ${{ env.CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **ECR Repository**: ${{ env.ECR_REPO_URL }}" >> $GITHUB_STEP_SUMMARY
          if [ -f service_url.txt ]; then
            echo "- **Service URL**: $(cat service_url.txt)" >> $GITHUB_STEP_SUMMARY
          fi