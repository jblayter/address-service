name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

  bump-version:
    needs: test
    runs-on: ubuntu-latest
    environment: production
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACTIONS_PAT }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"
          fi
          
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "Bumped version to: ${NEW_VERSION#v}"

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} [skip ci]"
          git tag v${{ steps.bump.outputs.new_version }}

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin v${{ steps.bump.outputs.new_version }}

  build-and-push:
    needs: bump-version
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ needs.bump-version.outputs.new_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [bump-version, build-and-push]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          release_name: Release v${{ needs.bump-version.outputs.new_version }}
          body: |
            ## What's Changed
            
            Automated release for version ${{ needs.bump-version.outputs.new_version }}
            
            ### Docker Image
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}`
            - Latest: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ### Deployment
            This release is being deployed to Digital Ocean.
          draft: false
          prerelease: false

  deploy-to-digitalocean:
    needs: [bump-version, build-and-push, create-release]
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for Docker Hub tag propagation
        run: |
          echo "Waiting 60 seconds to allow Docker Hub tag to propagate..."
          sleep 60

      - name: Deploy to Digital Ocean App Platform
        run: |
          # Install doctl CLI using snap (more reliable)
          sudo snap install doctl --classic
          
          # Authenticate with Digital Ocean
          doctl auth init --access-token ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
          # Debug: Print the version we're using
          echo "Using version: ${{ needs.bump-version.outputs.new_version }}"
          echo "App ID: ${{ secrets.DIGITALOCEAN_APP_ID }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}"
          
          # Verify the Docker image exists in Docker Hub
          echo "Verifying Docker image exists..."
          curl -s "https://hub.docker.com/v2/repositories/${{ env.IMAGE_NAME }}/tags/v${{ needs.bump-version.outputs.new_version }}/" | jq -r '.name' || echo "Image tag not found in Docker Hub"
          
          # Create app spec file with Docker Hub image
          cat > app-spec.yaml << EOF
          name: address-service-app
          services:
          - name: address-service-app
            image:
              registry_type: DOCKER_HUB
              registry: ${{ env.REGISTRY }}
              repository: ${{ env.IMAGE_NAME }}
              tag: latest
          EOF
          
          # Show the app spec for debugging
          echo "App spec:"
          cat app-spec.yaml
          
          # Update the app with the new spec
          doctl apps update "${{ secrets.DIGITALOCEAN_APP_ID }}" --spec app-spec.yaml
          
          # Create a new deployment
          doctl apps create-deployment "${{ secrets.DIGITALOCEAN_APP_ID }}"
          
          echo "Deployment to Digital Ocean App Platform initiated with image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}"