name: CI/CD Pipeline (GitOps with ArgoCD)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

  bump-version:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Bump version
        id: bump
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            BUMP_TYPE="patch"
          fi
          
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "new_version=${NEW_VERSION#v}" >> $GITHUB_OUTPUT
          echo "Bumped version to: ${NEW_VERSION#v}"

      - name: Update Helm chart version
        run: |
          # Update the Helm chart version to match the app version
          sed -i "s/^appVersion: .*/appVersion: \"${{ steps.bump.outputs.new_version }}\"/" charts/address-service/Chart.yaml
          sed -i "s/^version: .*/version: ${{ steps.bump.outputs.new_version }}/" charts/address-service/Chart.yaml

      - name: Commit version bump and chart updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json charts/address-service/Chart.yaml
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }} and update Helm chart [skip ci]"
          git tag v${{ steps.bump.outputs.new_version }}

      - name: Push changes and tag
        run: |
          git push origin main
          git push origin v${{ steps.bump.outputs.new_version }}

  build-and-push:
    needs: bump-version
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=v${{ needs.bump-version.outputs.new_version }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [bump-version, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.bump-version.outputs.new_version }}
          release_name: Release v${{ needs.bump-version.outputs.new_version }}
          body: |
            ## What's Changed
            
            Automated release for version ${{ needs.bump-version.outputs.new_version }}
            
            ### Docker Image
            - Image: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}`
            - Latest: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ### GitOps Deployment
            This release will be automatically deployed via ArgoCD GitOps.
            - ArgoCD watches this repository for changes
            - Helm chart updated to version ${{ needs.bump-version.outputs.new_version }}
            - Application will be deployed to EKS cluster
          draft: false
          prerelease: false

  # Note: No terraform-deploy job needed since ArgoCD handles deployment via GitOps
  # ArgoCD automatically syncs when it detects changes in the Git repository

  deployment-summary:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Summary
        run: |
          echo "## GitOps Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.bump-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Method**: GitOps via ArgoCD" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ArgoCD will automatically sync and deploy the new version" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. ArgoCD will detect the Git changes" >> $GITHUB_STEP_SUMMARY
          echo "2. Helm chart will be updated with new image tag" >> $GITHUB_STEP_SUMMARY
          echo "3. Application will be deployed to EKS cluster" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor deployment in ArgoCD UI" >> $GITHUB_STEP_SUMMARY